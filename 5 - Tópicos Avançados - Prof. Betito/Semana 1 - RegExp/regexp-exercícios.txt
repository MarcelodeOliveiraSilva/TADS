1) Validação por casamento de padrão
	a) números inteiros entre -999 e +999, inclusive: -20
		^-?\d*\.?\d+$ - todos neg e pos
		-?[0-9]?[0-9]?[0-9]+? --aceita 000
		-?([0-9]?[0-9]?[0-9]?)
		-?(([1-9][0-9][0-9])|([1-9][0-9])|([0-9])) --aceita "-0"
		-?([1-9][0-9][0-9])|-?([1-9][0-9])|-?([1-9])|0 -- nao aceita +-01,002
		(-?(([1-9][0-9][0-9])|([1-9][0-9])|([1-9])))|0$

	b) números inteiros entre -150 e +150, inclusive: -10
		-?150?|-?(1[0-4][0-9])|-?([1-9][0-9])|-?([0-9]) --aceita "-0"
		(-?(150?|(1[0-4][0-9])|([1-9][0-9])|([1-9])))|0$ --não aceita +-01,002
		
	c) números em binário no JavaScript: 0b10011100
		0[bB][0-1]+		
		
	d) números em octal no JavaScript: 0234, 0o234
		0o?[0-7]+

	e) números em hexadecimal no JavaScript: 0x9c
		0[xX][0-9]*[a-f|A-F]+

	f) cores no padrão HTML #RRGGBB: #FF8000
		#([0-9]|[A-F]){6}

	g) cores no padrão HTML rgb(R,G,B): rgb(255,128,0)
		rgb\(((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))),((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))),((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9])))\)

	h) horários no formato 12 horas com AM/PM: 01:23:45 PM
		(([01]?[0-9]|2[0-3])(:[0-5]?[0-9]){1,2}) (AM|PM)		

	i) datas, desconsiderando apenas anos bissextos com 29 dias em fevereiro: 2021-01-25
		(19|2[0-9])[0-9]{2}-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])
		meses com 31: 01,03,05,07,08,10,12 - (0?[13578]|1[02])-(0?[1-9]|[12][0-9]|3[01])
		meses com 30: 02,04,06,09,11 - (0?[2469]|11)-(0?[1-9]|[12][0-9]|30)
		(19|2[0-9])[0-9]{2}-((0?[13578]|1[02])-(0?[1-9]|[12][0-9]|3[01])|(0?[2469]|11)-(0?[1-9]|[12][0-9]|30))$

	j) números romanos entre I e MMMCMXCIX: MMXXI
		(?<=^)M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})(?=$) - net
		M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$


	k) endereços IPV6, comprimidos ou não: 2001:0DB8:00AD:000F:0000:0000:0000:0001, 2001:DB8:AD:F::1
		0[xX]?[0-9]*[a-f|A-F]+ - numeros hexadecimais
		8 sequencias com 4 números de 0-9 e/ou letras de A-F
		(([0-9]?[A-F]?){4}):(([0-9]?[A-F]?){4}):(([0-9]?[A-F]?){4}):(([0-9]?[A-F]?){4}):(([0-9]?[A-F]?){4}):(([0-9]?[A-F]?){4}):?(([0-9]?[A-F]?){4}):?(([0-9]?[A-F]?){4})$


	l) URLs http ou https contendo porta, pathparams, quaryparams e caracteres encodados com %: https://www.xyz.com.br:8080/abc/def/?a=123&b=express%C3%B5es+regulares
		https?:\/\/(www\.)?[a-zA-Z0-9@:%._\+~#=]{1,}\.[a-zA-Z0-9()]{1,}\b([-a-zA-Z0-9()@:%_\+.~#?&\/\/=]*) -net


	m) números por extenso entre um e novecentos e noventa e nove: duzentos e trinta e quatro
		(((nove|oito|sete|seis|quatro)centos|(quinh|trez|duz)entos|cento)?( e )?((((nov|oit|set|sess|cinqu|quar)enta|trinta|vinte)?( e )?(um|dois|tres|quatro|cinco|seis|sete|oito|nove)?)|(dez|onze|doze|treze|quatorze|quinze|dezesseis|dezessete|dezoito|dezenove)?))|cem?$

	n) value de textareas que não podem conter código HTML: exemplo de <font color="red">conteúdo inválido</font>
		^[^<>]*$



2) Extração por casamento de padrão
	a) componente R de uma cor no padrão HTML #RRGGBB: #FF8000 -> FF
		[^#]([0-9]|[A-F]){1}
		^#(([0-9]|[A-F]){1,2})(([0-9]|[A-F]){1,2})(([0-9]|[A-F]){1,2})$  \1

	b) componente G de uma cor no padrão HTML #RRGGBB: #FF8000 -> 80
		#([0-9]|[A-F]){6}
		^#(([0-9]|[A-F]){1,2})(([0-9]|[A-F]){1,2})(([0-9]|[A-F]){1,2})$  \3

	c) componente B de uma cor no padrão HTML #RRGGBB: #FF8000 -> 00
		#([0-9]|[A-F]){6}
		^#(([0-9]|[A-F]){1,2})(([0-9]|[A-F]){1,2})(([0-9]|[A-F]){1,2})$  \5

	d) componente R de uma cor no padrão HTML rgb(R,G,B): rgb(255,128,0) -> 255
		rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$  $1 - achei na net
		rgb\(((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))),((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))),((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9])))\)  $1

	e) componente G de uma cor no padrão HTML rgb(R,G,B): rgb(255,128,0) -> 128
		rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$  $2 - achei na net
		rgb\(((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))),((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))),((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9])))\) $7

	f) componente B de uma cor no padrão HTML rgb(R,G,B): rgb(255,128,0) -> 0
		rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$  $3 - achei na net
		rgb\(((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))),((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9]))),((25[0-5]|(2[0-4][0-9])|(1[0-9]{2})|([1-9][0-9])|([0-9])))\)  $14

	g) apenas o primeiro nome e o último sobrenome de uma pessoa: Fulano Silva Oliveira Brasil -> Fulano Brasil
		^([A-Z][a-z]+)( ?([A-Z][a-z]+))+$ $1 $3

	h) dia de um timestamp no formato ISO 8601: 2021-01-25T11:15, 20210125T1115 -> 25
		^(2[0-9]{3}|19[0-9]{2})-?([1][0-2]|0?[0-9])-?(3[01]|[012]?[0-9])T(2[0-3]|[01]?[0-9]):?([0-5][0-9]):?([0-5][0-9])?  $3

	i) mês de um timestamp no formato ISO 8601: 2021-01-25T11:15, 20210125T1115 -> 01
		^(2[0-9]{3}|19[0-9]{2})-?([1][0-2]|0?[0-9])-?(3[01]|[012]?[0-9])T(2[0-3]|[01]?[0-9]):?([0-5][0-9]):?([0-5][0-9])?  $2

	j) ano de um timestamp no formato ISO 8601: 2021-01-25T11:15, 20210125T1115 -> 2021
		^(2[0-9]{3}|19[0-9]{2})-?([1][0-2]|0?[0-9])-?(3[01]|[012]?[0-9])T(2[0-3]|[01]?[0-9]):?([0-5][0-9]):?([0-5][0-9])?  $1

	k) horas de um timestamp no formato ISO 8601: 2021-01-25T11:15, 20210125T1115 -> 11
		^(2[0-9]{3}|19[0-9]{2})-?([1][0-2]|0?[0-9])-?(3[01]|[012]?[0-9])T(2[0-3]|[01]?[0-9]):?([0-5][0-9]):?([0-5][0-9])?  $4

	l) minutos de um timestamp no formato ISO 8601: 2021-01-25T11:15, 20210125T1115 -> 15
		^(2[0-9]{3}|19[0-9]{2})-?([1][0-2]|0?[0-9])-?(3[01]|[012]?[0-9])T(2[0-3]|[01]?[0-9]):?([0-5][0-9]):?([0-5][0-9])?  $5

	m) segundos de um timestamp no formato ISO 8601: 2021-01-25T11:15, 20210125T1115 ->
		^(2[0-9]{3}|19[0-9]{2})-?([1][0-2]|0?[0-9])-?(3[01]|[012]?[0-9])T(2[0-3]|[01]?[0-9]):?([0-5][0-9]):?([0-5][0-9])?  $6

	n) instituição de um e-mail: fulano.brasil@riogrande.ifrs.edu.br -> riogrande.ifrs
		[a-z0-9]+([_\.][a-z0-9]+)*@([a-z0-9]+([_\.][a-z0-9]+)*)\.[a-z]{3}(\.[a-z]{2})? $2

	o) comentário de uma linha de um programa Java: int z = Math.pow(x, y); //x elevado a y -> x elevado a y
		[^//]*$

	p) atributo name de uma input type password de uma página HTML: <input type="password" name="senha"/> -> senha
		(<input[^>]*name=\"([0-9a-z]+)\"[^>]*\/?>) $2

	q) vogal do HTML entity de uma vogal acentuada, maiúscula ou minúscula: &oacute;, o&#769; -> o
		

	r) host na URL de conexão JBDC do PostgreSQL: jdbc:postgresql://localhost:5432/mochinho?user=admin&password=12345 -> localhost
		(jdbc:postgresql:\/\/)(localhost)(:[0-9]{1,4}\/)([a-z0-9]+)(\?user=)([a-z0-9]{5})(\&password=)([a-z0-9]+)  $2

	s) database na URL de conexão JBDC do PostgreSQL: jdbc:postgresql://localhost:5432/mochinho?user=admin&password=12345 -> mochinho
		(jdbc:postgresql:\/\/)(localhost)(:[0-9]{1,4}\/)([a-z0-9]+)(\?user=)([a-z0-9]{5})(\&password=)([a-z0-9]+)  $4

	t) user na URL de conexão JBDC do PostgreSQL: jdbc:postgresql://localhost:5432/mochinho?user=admin&password=12345 -> admin
		(jdbc:postgresql:\/\/)(localhost)(:[0-9]{1,4}\/)([a-z0-9]+)(\?user=)([a-z0-9]{5})(\&password=)([a-z0-9]+)  $6

	u) password na URL de conexão JBDC do PostgreSQL: jdbc:postgresql://localhost:5432/mochinho?user=admin&password=12345 -> 12345
		(jdbc:postgresql:\/\/)(localhost)(:[0-9]{1,4}\/)([a-z0-9]+)(\?user=)([a-z0-9]{5})(\&password=)([a-z0-9]+)  $8

	v) host na URL de conexão JBDC do MySQL: jdbc:mysql://localhost:3306/mochinho?user=admin&password=12345, jdbc:mysql://admin:12345@localhost:3306/mochinho -> localhost
		((jdbc:mysql:\/\/)(localhost)(:[0-9]{1,4}\/)([a-z0-9]+)(\?user=)([a-z0-9]{5})(\&password=)([a-z0-9]+)) $3
		((jdbc:mysql:\/\/)([a-z0-9]{5})(\:([a-z0-9]{5})@(localhost):([a-z0-9]+)\/([a-z0-9]+))) $6

	w) database na URL de conexão JBDC do MySQL: jdbc:mysql://localhost:3306/mochinho?user=admin&password=12345, jdbc:mysql://admin:12345@localhost:3306/mochinho -> mochinho
		((jdbc:mysql:\/\/)(localhost)(:[0-9]{1,4}\/)([a-z0-9]+)(\?user=)([a-z0-9]{5})(\&password=)([a-z0-9]+))  $5
		((jdbc:mysql:\/\/)([a-z0-9]{5})(\:([a-z0-9]{5})@(localhost):([a-z0-9]+)\/([a-z0-9]+))) $8

	x) user na URL de conexão JBDC do MySQL: jdbc:mysql://localhost:3306/mochinho?user=admin&password=12345, jdbc:mysql://admin:12345@localhost:3306/mochinho -> admin
		((jdbc:mysql:\/\/)(localhost)(:[0-9]{1,4}\/)([a-z0-9]+)(\?user=)([a-z0-9]{5})(\&password=)([a-z0-9]+))  $7
		((jdbc:mysql:\/\/)([a-z0-9]{5})(\:([a-z0-9]{5})@(localhost):([a-z0-9]+)\/([a-z0-9]+))) $3

	y) password na URL de conexão JBDC do MySQL: jdbc:mysql://localhost:3306/mochinho?user=admin&password=12345, jdbc:mysql://admin:12345@localhost:3306/mochinho -> 12345
		((jdbc:mysql:\/\/)(localhost)(:[0-9]{1,4}\/)([a-z0-9]+)(\?user=)([a-z0-9]{5})(\&password=)([a-z0-9]+))  $9
		((jdbc:mysql:\/\/)([a-z0-9]{5})(\:([a-z0-9]{5})@(localhost):([a-z0-9]+)\/([a-z0-9]+))) $5


3) Transformação por casamento de padrão
	a) truncar um número real em 3 casas depois do ponto fracionário: 123.456789 -> 123.456
		^([-])?([0-9]+)(.[0-9]{0,3})?([0-9]*)?$  $1$2$3	

	b) retirar zeros à esquerda de um número inteiro ou real: -000123 -> -123
		^([-])?(0*)([0-9]+)(.[0-9]*)?$  $1$3$4

	c) retirar zeros à direita da parte fracionária de um número real: 123.456000 -> 123.456
		^([-])?([0-9]+)(.[0-9]*[1-9])?([0]*)?$ $1$2$3

	d) transformar um condicional ternário em JavaScript no if-then-else correspondente: x += ((2*z < 100) && (z > 10))?-2:y-z; -> if ((2*z < 100) && (z > 10)) x += -2; else x += y-z;

	e) transformar um for em JavaScript com apenas um comando dentro no while correspondente: for (x = 1, y = 2; ((x < y) && (x+y < z)); x++, y += 2) console.log(x+y); -> x = 1; y = 2; while ((x < y) && (x+y < z)) { console.log(x+y); x++; y += 2; }

	f) transformar uma URL de conexão JBDC MySQL em uma URL de conexão JBDC PostgreSQL: jdbc:mysql://localhost:9876/mochinho?user=admin&password=12345, jdbc:mysql://admin:12345@localhost:9876/mochinho -> jdbc:postgresql://localhost:9876/mochinho?user=admin&password=12345

